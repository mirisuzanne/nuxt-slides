---
title: Dynamic CSS
subtitle: Layouts & Beyond
event: FullStackFest
author: miriam
date: 2018-08-21
image: /images/dynamic-css/_cover.jpg
tags: [css, variables, custom properties, grid, graphs]
---

Don't be fooled by the declarative syntax,
CSS is a powerful language for
building dynamic design systems.

<!-- slide -->

---
layout: title
---

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/intro.jpg'
alt: ''
---

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/intro-fixed.jpg'
alt: ''
---

<!-- slide -->

![OddBird Faces](/images/_oddbird/allbirds.svg)

## [OddBird](https://oddbird.net)
Full-Stack **Client Services**

<!-- slide -->

---
image: '/images/dynamic-css/jsconfus18/learning.jpg'
alt: 'One does not simply "learn" JavaScript'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/susy.png'
alt: 'Susy'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/susy-downloads.jpg'
alt: 'Susy download numbers are big'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/susy-no.jpg'
alt: 'Susy, scribbled out'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/mission.jpg'
caption: 'Mission statement‚Ä¶'
---

<!-- slide -->

## Let's Talk About **CSS**

<!-- slide -->

## Let's Talk About ~~CSS~~ **History**

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/history.jpg'
alt: ''
---

<!-- slide -->

## 1993: **HTML**
Markup Language

<!-- slide -->

---
image: '/images/patterns/oddbird-w-logo.jpg'
alt: 'OddBird siblings (Jonny, Carl, and Miriam) in 1994'
---

<!-- slide -->

## 1997: **`<font>`** `&&` **`<table>`**
HTML 3.2

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/tables.jpg'
alt: ''
---

<!-- slide -->

## `(‚ïØ'‚ñ°')‚ïØÔ∏µ` **`‚îª‚îÅ‚îª`**
"TABLES ARE FOR **DATA**"

<!-- slide -->

## ~~1996~~ 2000: Cascading **Style Sheets**
Principle of **Least Power**

<!-- slide -->

![CSS is Awesome](/images/dynamic-css/css-is-awesome.jpg)
(This is a **Feature**)

<!-- slide -->

## 2000: A **Dao** of Web Design
[John Allsopp](https://alistapart.com/article/dao)

<!-- slide -->

> The **control** which designers know in the **print medium**,
> and often desire in the web medium,
> is simply a function of the **limitation of the printed page**.

<!-- slide -->

## 2007-2010: Major Grid **Frameworks**
Blueprint, OOCSS, 960gs

<!-- slide -->

![OddBird Faces](/images/_oddbird/allbirds.svg)

## [OddBird](https://oddbird.net)
est. **2008**

<!-- slide -->

---
image: '/images/patterns/systems.png'
alt: 'CSS Systems by Natalie Downe'
caption: 'Source: http://www.slideshare.net/nataliedowne/css-systems-presentation'
style:
  --image-size: contain
---

<!-- slide -->

1. **Systems** > Frameworks
2. **Fluid** Grids
3. Static (`px`) | Elastic (`em`) **Containers**

<!-- slide -->

## üëç
## "Responsive" **before** Responsive(tm)

<!-- slide -->

## üëé
## **Ugly** Math
`target / context * 100%`

<!-- slide -->

```scss
.grid-span {
  width: 23.7288136%;
  margin-right: 01.6949153%;
  padding-left: 08.4745763%;
}
```

<!-- slide -->

## 2009: Compass + **Sass**
Turing-complete CSS!

<!-- slide -->

```scss
.grid-span {
  width: percentage(((3*4em) + (2*1em)) / ((12*4em) + (11*1em))); // 23.7288136%
  margin-right: percentage(1em / ((12*4em) + (11*1em))); // 01.6949153%
  padding-left: percentage(((1*4em) + (1*1em)) / ((12*4em) + (11*1em))); // 08.4745763%
}
```

<!-- slide -->

---
image: '/images/dynamic-css/susy.png'
alt: 'Susy'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/susy-no.jpg'
alt: 'Susy, scribbled out'
style:
  --image-size: 'contain'
---

<!-- slide -->

```scss
.grid-span {
  width: span(3);
  margin-right: gutter();
  padding-left: span(1 wide);
}
```

<!-- slide -->

## Make Code **Meaningful**
(To **humans** `&&` **machines**)

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/domore.jpg'
alt: 'Make your code do more.'
---

<!-- slide -->

## `hsl(330, 100%, 45%)` => **`$brand`**
We're **Naming Things**!

<!-- slide -->

## "Code is **Communication**"
‚ÄîSarah Drasner **\***

<!-- slide -->

## **\*** (once)

<!-- slide -->

## 2009: **`@media`** queries
Safari 4

<!-- slide -->

## 2011: **`calc()`**
Firefox 4

<!-- slide -->

## **Mixed-Unit** Calculations
### `calc(` **`16px`** `+` **`20%`** `)`

<!-- slide -->

## 2011: **Responsive** Web Design
[Ethan Marcotte](https://alistapart.com/article/responsive-web-design)

<!-- slide -->

---
image: '/images/dynamic-css/devices.jpg'
alt: 'A zillion different devices of all sizes (original)'
---

<!-- slide -->

## **!**üë®

<!-- slide -->

---
image: '/images/patterns/people-masc.jpg'
alt: 'Masculine emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/patterns/people-femme.jpg'
alt: 'Feminine emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/patterns/people-rando.jpg'
alt: 'Various people emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

### don't be fooled‚Ä¶
## **Declarative** Syntax **`!=`** **Static** Results

<!-- slide -->

## Go with **the flow**!

<!-- slide -->

---
demo: 'layoutFlow'
---

<!-- slide -->

1. Fluid **Grids**
2. Flexible **Images**
3. Media **Queries**

<!-- slide -->

## 2012: **Flexbox**
Chrome 21

<!-- slide -->

---
image: '/images/layouts/flexbox.jpg'
caption: 'Flexbox line-wrapping'
style:
  --image-size: contain
---

<!-- slide -->

## 2014: `--css-`**`variables`**
Firefox 31 (unless you count **`currentColor`**)

<!-- slide -->

```scss
.example {
  --color: red;
  background: var(--red);
}
```

<!-- slide -->

## `-<empty>-`**`browser-prefix`**

<!-- slide -->

## `--aka`**`:`** `'custom properties'`**`;`**

<!-- slide -->

## `var(` **`--property-name`** `, fallback)`

<!-- slide -->

## Similar to **Sass**‚Ä¶
(but not the same!)

<!-- slide -->

## `$sass-variables`**`:`** `rad`**`;`**

<!-- slide -->

## Variables Hold **Data**

```scss {data-code=h3}
$brand: hsl(330, 100%, 45%);
```

<!-- slide -->

## Variables are **`$reusable`**
(**D**on't **R**epeat **Y**ourself)

<!-- slide -->

## Sass Variables **Scope**

<!-- slide -->

```scss
.example { $columns: 2; }
.nested-class { /* $columns == undefined */ }

@media (min-width: 30em) {
  .example { $columns: 6; }
  .nested-class { /* $columns == undefined */ }
}
```

<!-- slide -->

## CSS Variables **Inherit**

<!-- slide -->

```scss
.example { --columns: 2; }
.nested-class { /* var(--columns) == 2 */ }

@media (min-width: 30em) {
  .example { --columns: 6; }
  .nested-class { /* var(--columns) == 6 */ }
}
```

<!-- slide -->

## Inherit Everywhere:

```scss
:root {
  --brand-color: hsl(330, 100%, 45%);
}
```

<!-- slide -->

## **Don't** Inherit:

```scss
* {
  --brand-color: initial;
}
```

<!-- slide -->

## **Safe** Inline Styles

```html
<button style="--color: blue;">
```

<!-- slide -->

## **Use** the Variable‚Ä¶

```scss
button {
  background: var(--color, red);
}
```

<!-- slide -->

## ‚Ä¶or **Ignore** the Variable

```scss
button.green {
  background: green;
}
```

<!-- slide -->

## Avoid **Nesting**‚Ä¶

```scss
button {
  background: blue
}

.this button {
  background: red;
}
```

<!-- slide -->

## ‚Ä¶For Lower **Specificity**

```scss
button {
  background: var(--btn-color, blue);
}

.this {
  --btn-color: red;
}
```

<!-- slide -->

## Defaults & Missing **Longhand**

```scss
.example {
  --shadow-y: -1px;
  box-shadow: var(--shadow-x, 0)
              var(--shadow-y, 1px)
              var(--shadow-blur, 0)
              var(--shadow-color, currentColor);
}
```

<!-- slide -->

## Auto-**Prefixing** "Mixins"

```scss
* {
  --clip-path: initial;
  -webkit-clip-path: var(--clip-path);
  clip-path: var(--clip-path);
}
```

<!-- slide -->

## Combine with **`calc()`**

```scss {data-code=h3}
.example {
  margin: calc(1em + var(--extra-margin));
}
```

<!-- slide -->

---
demo: 'cssSusy'
resize: true
caption: |
  [AG Grid Nesting Test](http://oocss.org/grids_docs.html)
  from OOCSS
---

<!-- slide -->

## Global Settings‚Ä¶

```css
:root {
  --susy-columns: 1;
  --susy-gutters: 0.25;
  --susy-spread: -1;
  --susy-container-spread: -1;
/*   --susy-static-grid: 1; */
/*   --susy-debug-color: green; */
}
```

<!-- slide -->

## A Variable for **Every Function**‚Ä¶

```css
* {
  /* gutter output math */
  --su-inside-gutters: calc(
      var(--gutter-width) * var(--gutters-inside)
    );

  --su-gutters-left: calc(
      var(--gutter-width) * var(--gutters-left)
    );
}
```

<!-- slide -->

## Media Queries‚Ä¶

```css
@media (min-width: 30em) {
  /* settings */
  :root { --susy-columns: 5; }

  /* layout */
  [data-susy~='2']{ --span: 1; }
  [data-susy~='6'] { --span: 3; }
  [data-susy~='6'] * { --susy-columns: 3 }
  [data-susy~='3'] { --span: 3; }
  [data-susy~='4'] { --span: 2; }
  [data-susy~='4'] * { --susy-columns: 2 }
}
```

<!-- slide -->

## Background Images‚Ä¶

```css
main {
  background-image: var(--debug-image);
  background-size: var(--debug-image-size);
  margin: var(--static-gutters) auto;
  overflow: hidden;
}
```

<!-- slide -->

## üòÜ
## **Please** Don't Use It

<!-- slide -->

## Manipulate **`hsl()`** Values

```css
* {
  --h: 330;
  --s: 100%;
  --l: 34%;
  background: hsl(var(--h), var(--s), var(--l));
}
```

<!-- slide -->

## Use **Radial** Values to Theme

```css
* {
  --darken: calc(var(--l) - 20%);
  --complement: calc(var(--h) - 180);
  background: hsl(var(--complement), var(--s), var(--darken));
}
```

<!-- slide -->

## Use "**Clamped**" Values to Toggle

```css
* {
  --threshold: 55; /* toggle 'contrast' between white & black */
  --contrast: calc((var(--l) - var(--threshold)) * -100%);
  color: hsl(var(--h), var(--s), var(--contrast));
}
```

<!-- slide -->

---
demo: 'hslTheme'
caption: |
  Inspired by [Facundo Corradini](https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/)
---

<!-- slide -->

## JS `getPropertyValue()` **&** `setProperty()`

```js
let currentColor = footer.style.getPropertyValue('--color');
footer.style.setProperty('--color', newColor);
```

<!-- slide -->

---
image: '/images/dynamic-css/jsconfus18/learning.jpg'
alt: 'One does not simply "learn" JavaScript'
style:
  --image-size: 'contain'
---

<!-- slide -->

## Issues:

1. Unknown value `type`s
  (transition known properties, not variables)
2. Don't work inside `url()`
3. ~~`var(--size)em`~~ **=>** `calc(var(--size) * 1em)`

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/houdini.jpg'
alt: ''
---

<!-- slide -->

## Houdini [Properties & Values API][values] **\***
**\*** Experimental (behind Chrome flag)

[values]: https://drafts.css-houdini.org/css-properties-values-api/

<!-- slide -->

```js
CSS.registerProperty({
  name: "--brand-color",
  syntax: "<color>",
  initialValue: "pink",
  inherits: true,
});
```

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/future.jpg'
alt: ''
---

<!-- slide -->

## 2017: **Jet Packs***!
*Kinda

<!-- slide -->

## 2017: CSS **Grid**
Firefox 52 **&** Chrome 57 **&** Safari 10

<!-- slide -->

## **Nothing** Like It
At All

<!-- slide -->

# The Spec is **Complex**‚Ä¶
## **Getting Started** Is Not

<!-- slide -->

## Defined **On Containers**

```scss
.container {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-gap: 10px;
}
```

<!-- slide -->

## Optional **Element** Control
**`auto`** returns to the flow‚Ä¶

<!-- slide -->

## **`%`** => relative to **parent width**
## **`vw`** => relative to **the viewport**
## **`fr`** => relative to **remaining space**

<!-- slide -->

## **`1fr`** `==` **`minmax(auto, 1fr)`**
### use **`minmax(0, 1fr)`** to allow shrinking

<!-- slide -->

---
image: '/images/layouts/grid-lines.jpg'
alt: 'Grid lines are 1-indexed'
style:
  --image-size: contain
---

<!-- slide -->

---
image: '/images/layouts/grid-lines-negative.jpg'
alt: 'Grid lines are also -1 indexed in reverse'
style:
  --image-size: contain
---

<!-- slide -->

## Single **Source of Truth**

```scss
body {
  grid-template-areas:
      'header               header'           auto
      'nav                  main'             1fr
      'footer               footer'           auto
    / minmax(14em, auto)    minmax(0, 1fr);
}
```

<!-- slide -->

```scss
h1 { grid-area: header; }
nav { grid-area: nav; }
main { grid-area: main; }
footer { grid-area: footer; }
```

<!-- slide -->

---
image: '/images/layouts/grid.jpg'
alt: 'Grid output from grid-area code'
style:
  --image-size: contain
---

<!-- slide -->

## 2018: **Intrinsic** Web Design
[Jen Simmons](https://twitter.com/jensimmons/status/980980521848127488)

<!-- slide -->

## Fluid **&** Fixed

<!-- slide -->

## **Stages** of **Squishiness**

<!-- slide -->

1. fixed
2. `fr` units (fluid)
3. `minmax()` (fluid until fixed)
4. `auto` (flow)

<!-- slide -->

## Truly **Two-Dimensional** Layouts
columns & rows!

<!-- slide -->

---
image: '/images/layouts/grid-axis.jpg'
caption: 'Grid columns and rows'
style:
  --image-size: contain
---

<!-- slide -->

## **Nested** Contexts
flexbox, grid, float, etc‚Ä¶

<!-- slide -->

## Expand & Contract **Content**
justify, wrap, flex, etc‚Ä¶

<!-- slide -->

## Media Queries, **As Needed**
`repeat(` **`auto-fit`** `, minmax(` **`20em`** `,` **`1fr`** `))`

<!-- slide -->

## **Data-Driven** Layouts
`<div style="` **`--start`**`: 30;` **`--duration`**`: 60;">`

<!-- slide -->

---
image: '/images/layouts/schedule.jpg'
alt: 'Screenshot of schedule grid'
style:
  --image-size: contain
---

<!-- slide -->

## Bar **Charts**

```html
<dl class="chart" style="--scale: 100">
  <dt class="date">2000</dt>
  <dd class="bar" style="--value: 45">45%</dd>

  <dt class="date">2001</dt>
  <dd class="bar" style="--value: 100">100%</dd>

  <!-- etc‚Ä¶ -->
</dl>
```html

<!-- slide -->

```css
.bar {
  --start: calc(var(--scale) + 1 - var(--value));
  grid-row-start: var(--start);
}
```

<!-- slide -->

---
demo: 'cssChart'
resize: true
caption: |
  [Article on **CSS Tricks**](https://css-tricks.com/css-charts-grid-custom-properties/)
---

<!-- slide -->

---
image: '/images/dynamic-css/cssconfar18/daniela.jpg'
caption: |
  Daniela V√°zquez ([@d4tagirl](https://twitter.com/d4tagirl))
  data visualization at **CSS Conf Argentina**
---

<!-- slide -->

---
demo: 'cssLinegraph'
resize: true
---

<!-- slide -->

---
demo: 'cssPlot'
resize: true
---

<!-- slide -->

---
image: '/images/dynamic-css/fullstack18/3dgraph.jpg'
alt: ''
---

<!-- slide -->

## **???**

<!-- slide -->

---
image: '/images/layouts/invade.jpg'
caption: |
  [Levitated Toy Factory](http://levitated.guru/work/)
  at **Beyond Tellerand**
---

<!-- slide -->

---
demo: 'vueInvaders'
resize: true
---

<!-- slide -->

## Movement Demos by [**Mauricio Palma**][mp]
https://codepen.io/collection/DVPpvo/

[mp]: https://twitter.com/PalmaSwell

<!-- slide -->

## Learn from [Lea Verou](http://twitter.com/leaverou)
[video](https://www.youtube.com/watch?v=2an6-WVPuJU)
| [slides](http://leaverou.github.io/css-variables)

<!-- slide -->

## gridbyexample.com
examples, templates, and fallbacks by **Rachel Andrew**

<!-- slide -->

## youtube.com/layoutland
and labs.jensimmons.com by **Jen Simmons**

<!-- slide -->

---
demo: 'cssAwesome'
resize: true
caption: |
  Inspired by [Stacy Kvernmo](https://codepen.io/stacy/pen/VxvpBj)
---

<!-- slide -->

---
layout: template
---

## Have **Fun**!

<!-- slide -->

---
layout: contact
form:
  email: 'birds@oddbird.net'
  next: 'https://oddbird.net/contact/thanks'
  submit: 'send it!'
---

